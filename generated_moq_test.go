// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package eventd

import (
	"context"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			GetEventsFromFunc: func(ctx context.Context, from uint64, limit uint64) ([]Event, error) {
// 				panic("mock out the GetEventsFrom method")
// 			},
// 			GetLastEventsFunc: func(ctx context.Context, limit uint64) ([]Event, error) {
// 				panic("mock out the GetLastEvents method")
// 			},
// 			GetLastSequenceFunc: func(ctx context.Context, id PublisherID) (uint64, error) {
// 				panic("mock out the GetLastSequence method")
// 			},
// 			GetUnprocessedEventsFunc: func(ctx context.Context, limit uint64) ([]Event, error) {
// 				panic("mock out the GetUnprocessedEvents method")
// 			},
// 			SaveLastSequenceFunc: func(ctx context.Context, id PublisherID, seq uint64) error {
// 				panic("mock out the SaveLastSequence method")
// 			},
// 			UpdateSequencesFunc: func(ctx context.Context, events []Event) error {
// 				panic("mock out the UpdateSequences method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// GetEventsFromFunc mocks the GetEventsFrom method.
	GetEventsFromFunc func(ctx context.Context, from uint64, limit uint64) ([]Event, error)

	// GetLastEventsFunc mocks the GetLastEvents method.
	GetLastEventsFunc func(ctx context.Context, limit uint64) ([]Event, error)

	// GetLastSequenceFunc mocks the GetLastSequence method.
	GetLastSequenceFunc func(ctx context.Context, id PublisherID) (uint64, error)

	// GetUnprocessedEventsFunc mocks the GetUnprocessedEvents method.
	GetUnprocessedEventsFunc func(ctx context.Context, limit uint64) ([]Event, error)

	// SaveLastSequenceFunc mocks the SaveLastSequence method.
	SaveLastSequenceFunc func(ctx context.Context, id PublisherID, seq uint64) error

	// UpdateSequencesFunc mocks the UpdateSequences method.
	UpdateSequencesFunc func(ctx context.Context, events []Event) error

	// calls tracks calls to the methods.
	calls struct {
		// GetEventsFrom holds details about calls to the GetEventsFrom method.
		GetEventsFrom []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// From is the from argument value.
			From uint64
			// Limit is the limit argument value.
			Limit uint64
		}
		// GetLastEvents holds details about calls to the GetLastEvents method.
		GetLastEvents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit uint64
		}
		// GetLastSequence holds details about calls to the GetLastSequence method.
		GetLastSequence []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID PublisherID
		}
		// GetUnprocessedEvents holds details about calls to the GetUnprocessedEvents method.
		GetUnprocessedEvents []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Limit is the limit argument value.
			Limit uint64
		}
		// SaveLastSequence holds details about calls to the SaveLastSequence method.
		SaveLastSequence []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID PublisherID
			// Seq is the seq argument value.
			Seq uint64
		}
		// UpdateSequences holds details about calls to the UpdateSequences method.
		UpdateSequences []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Events is the events argument value.
			Events []Event
		}
	}
	lockGetEventsFrom        sync.RWMutex
	lockGetLastEvents        sync.RWMutex
	lockGetLastSequence      sync.RWMutex
	lockGetUnprocessedEvents sync.RWMutex
	lockSaveLastSequence     sync.RWMutex
	lockUpdateSequences      sync.RWMutex
}

// GetEventsFrom calls GetEventsFromFunc.
func (mock *RepositoryMock) GetEventsFrom(ctx context.Context, from uint64, limit uint64) ([]Event, error) {
	if mock.GetEventsFromFunc == nil {
		panic("RepositoryMock.GetEventsFromFunc: method is nil but Repository.GetEventsFrom was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		From  uint64
		Limit uint64
	}{
		Ctx:   ctx,
		From:  from,
		Limit: limit,
	}
	mock.lockGetEventsFrom.Lock()
	mock.calls.GetEventsFrom = append(mock.calls.GetEventsFrom, callInfo)
	mock.lockGetEventsFrom.Unlock()
	return mock.GetEventsFromFunc(ctx, from, limit)
}

// GetEventsFromCalls gets all the calls that were made to GetEventsFrom.
// Check the length with:
//     len(mockedRepository.GetEventsFromCalls())
func (mock *RepositoryMock) GetEventsFromCalls() []struct {
	Ctx   context.Context
	From  uint64
	Limit uint64
} {
	var calls []struct {
		Ctx   context.Context
		From  uint64
		Limit uint64
	}
	mock.lockGetEventsFrom.RLock()
	calls = mock.calls.GetEventsFrom
	mock.lockGetEventsFrom.RUnlock()
	return calls
}

// GetLastEvents calls GetLastEventsFunc.
func (mock *RepositoryMock) GetLastEvents(ctx context.Context, limit uint64) ([]Event, error) {
	if mock.GetLastEventsFunc == nil {
		panic("RepositoryMock.GetLastEventsFunc: method is nil but Repository.GetLastEvents was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Limit uint64
	}{
		Ctx:   ctx,
		Limit: limit,
	}
	mock.lockGetLastEvents.Lock()
	mock.calls.GetLastEvents = append(mock.calls.GetLastEvents, callInfo)
	mock.lockGetLastEvents.Unlock()
	return mock.GetLastEventsFunc(ctx, limit)
}

// GetLastEventsCalls gets all the calls that were made to GetLastEvents.
// Check the length with:
//     len(mockedRepository.GetLastEventsCalls())
func (mock *RepositoryMock) GetLastEventsCalls() []struct {
	Ctx   context.Context
	Limit uint64
} {
	var calls []struct {
		Ctx   context.Context
		Limit uint64
	}
	mock.lockGetLastEvents.RLock()
	calls = mock.calls.GetLastEvents
	mock.lockGetLastEvents.RUnlock()
	return calls
}

// GetLastSequence calls GetLastSequenceFunc.
func (mock *RepositoryMock) GetLastSequence(ctx context.Context, id PublisherID) (uint64, error) {
	if mock.GetLastSequenceFunc == nil {
		panic("RepositoryMock.GetLastSequenceFunc: method is nil but Repository.GetLastSequence was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  PublisherID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetLastSequence.Lock()
	mock.calls.GetLastSequence = append(mock.calls.GetLastSequence, callInfo)
	mock.lockGetLastSequence.Unlock()
	return mock.GetLastSequenceFunc(ctx, id)
}

// GetLastSequenceCalls gets all the calls that were made to GetLastSequence.
// Check the length with:
//     len(mockedRepository.GetLastSequenceCalls())
func (mock *RepositoryMock) GetLastSequenceCalls() []struct {
	Ctx context.Context
	ID  PublisherID
} {
	var calls []struct {
		Ctx context.Context
		ID  PublisherID
	}
	mock.lockGetLastSequence.RLock()
	calls = mock.calls.GetLastSequence
	mock.lockGetLastSequence.RUnlock()
	return calls
}

// GetUnprocessedEvents calls GetUnprocessedEventsFunc.
func (mock *RepositoryMock) GetUnprocessedEvents(ctx context.Context, limit uint64) ([]Event, error) {
	if mock.GetUnprocessedEventsFunc == nil {
		panic("RepositoryMock.GetUnprocessedEventsFunc: method is nil but Repository.GetUnprocessedEvents was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Limit uint64
	}{
		Ctx:   ctx,
		Limit: limit,
	}
	mock.lockGetUnprocessedEvents.Lock()
	mock.calls.GetUnprocessedEvents = append(mock.calls.GetUnprocessedEvents, callInfo)
	mock.lockGetUnprocessedEvents.Unlock()
	return mock.GetUnprocessedEventsFunc(ctx, limit)
}

// GetUnprocessedEventsCalls gets all the calls that were made to GetUnprocessedEvents.
// Check the length with:
//     len(mockedRepository.GetUnprocessedEventsCalls())
func (mock *RepositoryMock) GetUnprocessedEventsCalls() []struct {
	Ctx   context.Context
	Limit uint64
} {
	var calls []struct {
		Ctx   context.Context
		Limit uint64
	}
	mock.lockGetUnprocessedEvents.RLock()
	calls = mock.calls.GetUnprocessedEvents
	mock.lockGetUnprocessedEvents.RUnlock()
	return calls
}

// SaveLastSequence calls SaveLastSequenceFunc.
func (mock *RepositoryMock) SaveLastSequence(ctx context.Context, id PublisherID, seq uint64) error {
	if mock.SaveLastSequenceFunc == nil {
		panic("RepositoryMock.SaveLastSequenceFunc: method is nil but Repository.SaveLastSequence was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  PublisherID
		Seq uint64
	}{
		Ctx: ctx,
		ID:  id,
		Seq: seq,
	}
	mock.lockSaveLastSequence.Lock()
	mock.calls.SaveLastSequence = append(mock.calls.SaveLastSequence, callInfo)
	mock.lockSaveLastSequence.Unlock()
	return mock.SaveLastSequenceFunc(ctx, id, seq)
}

// SaveLastSequenceCalls gets all the calls that were made to SaveLastSequence.
// Check the length with:
//     len(mockedRepository.SaveLastSequenceCalls())
func (mock *RepositoryMock) SaveLastSequenceCalls() []struct {
	Ctx context.Context
	ID  PublisherID
	Seq uint64
} {
	var calls []struct {
		Ctx context.Context
		ID  PublisherID
		Seq uint64
	}
	mock.lockSaveLastSequence.RLock()
	calls = mock.calls.SaveLastSequence
	mock.lockSaveLastSequence.RUnlock()
	return calls
}

// UpdateSequences calls UpdateSequencesFunc.
func (mock *RepositoryMock) UpdateSequences(ctx context.Context, events []Event) error {
	if mock.UpdateSequencesFunc == nil {
		panic("RepositoryMock.UpdateSequencesFunc: method is nil but Repository.UpdateSequences was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Events []Event
	}{
		Ctx:    ctx,
		Events: events,
	}
	mock.lockUpdateSequences.Lock()
	mock.calls.UpdateSequences = append(mock.calls.UpdateSequences, callInfo)
	mock.lockUpdateSequences.Unlock()
	return mock.UpdateSequencesFunc(ctx, events)
}

// UpdateSequencesCalls gets all the calls that were made to UpdateSequences.
// Check the length with:
//     len(mockedRepository.UpdateSequencesCalls())
func (mock *RepositoryMock) UpdateSequencesCalls() []struct {
	Ctx    context.Context
	Events []Event
} {
	var calls []struct {
		Ctx    context.Context
		Events []Event
	}
	mock.lockUpdateSequences.RLock()
	calls = mock.calls.UpdateSequences
	mock.lockUpdateSequences.RUnlock()
	return calls
}

// Ensure, that PublisherMock does implement Publisher.
// If this is not the case, regenerate this file with moq.
var _ Publisher = &PublisherMock{}

// PublisherMock is a mock implementation of Publisher.
//
// 	func TestSomethingThatUsesPublisher(t *testing.T) {
//
// 		// make and configure a mocked Publisher
// 		mockedPublisher := &PublisherMock{
// 			PublishFunc: func(ctx context.Context, events []Event) error {
// 				panic("mock out the Publish method")
// 			},
// 		}
//
// 		// use mockedPublisher in code that requires Publisher
// 		// and then make assertions.
//
// 	}
type PublisherMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(ctx context.Context, events []Event) error

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Events is the events argument value.
			Events []Event
		}
	}
	lockPublish sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *PublisherMock) Publish(ctx context.Context, events []Event) error {
	if mock.PublishFunc == nil {
		panic("PublisherMock.PublishFunc: method is nil but Publisher.Publish was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Events []Event
	}{
		Ctx:    ctx,
		Events: events,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	return mock.PublishFunc(ctx, events)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//     len(mockedPublisher.PublishCalls())
func (mock *PublisherMock) PublishCalls() []struct {
	Ctx    context.Context
	Events []Event
} {
	var calls []struct {
		Ctx    context.Context
		Events []Event
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}
